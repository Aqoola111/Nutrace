generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  foods     Food[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Food {
  id               String            @id @default(uuid())
  name             String            @unique
  calories         Float?
  protein          Float?
  fat              Float?
  carbohydrates    Float?
  fiber            Float?
  sugar            Float?
  foodServingUnits FoodServingUnit[]
  mealFoods        MealFood[]
  servingUnits     ServingUnit[]     @relation("FoodServingUnits")
  category         Category?         @relation(fields: [categoryId], references: [id])
  categoryId       Int?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model ServingUnit {
  id              String            @id @default(uuid())
  name            String
  foodServingUnit FoodServingUnit[]
  foods           Food[]            @relation("FoodServingUnits")
  mealFoods       MealFood[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model FoodServingUnit {
  id            String      @id @default(uuid())
  food          Food        @relation(fields: [foodId], references: [id])
  servingUnit   ServingUnit @relation(fields: [servingUnitId], references: [id])
  grams         Float?
  foodId        String
  servingUnitId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model User {
  id             String   @id @default(uuid())
  name           String
  email          String   @unique
  hashedPassword String
  role           Role     @default(USER)
  meals          Meal[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

model Meal {
  id        Int        @id @default(autoincrement())
  dateTime  DateTime
  mealFoods MealFood[]
  user      User?      @relation(fields: [userId], references: [id])
  userId    String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model MealFood {
  id            Int         @id @default(autoincrement())
  food          Food        @relation(fields: [foodId], references: [id])
  meal          Meal        @relation(fields: [mealId], references: [id])
  servingUnit   ServingUnit @relation(fields: [servingUnitId], references: [id])
  foodId        String
  mealId        Int
  servingUnitId String
  amount        Float
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}
